"use client";

import React, { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/lib/useAuth';
import { fetchWithAuth } from '@/lib/api';
import { useToast } from "@/components/ui/use-toast";
import { Loader2, AlertCircle, RefreshCw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { TradeHistory } from './TradeHistory';
import { RightColumn } from './RightColumn';

// Types
export interface TradeHistoryRecord {
  id: string;
  session: number;
  direction: "UP" | "DOWN";
  amount: number;
  status: "pending" | "win" | "lose";
  result: "win" | "lose" | null;
  profit: number;
  createdAt: string;
  updatedAt?: string;
}

interface Session {
  sessionId: string;
  result: string | null;
  status: string;
  startTime: Date;
  endTime?: Date;
}

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';

export default function TradePage() {
  const { user, token, loading } = useAuth();
  const router = useRouter();
  const { toast } = useToast();
  
  // State
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [balance, setBalance] = useState<number>(0);
  const [tradeHistory, setTradeHistory] = useState<TradeHistoryRecord[]>([]);
  const [currentSession, setCurrentSession] = useState<Session | null>(null);
  const [amount, setAmount] = useState<string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Load initial data
  useEffect(() => {
    if (!loading && !user) {
      router.replace('/auth/login');
      toast({ variant: 'destructive', title: 'Vui lòng đăng nhập để sử dụng tính năng này' });
      return;
    }

    if (!token) return;

    const loadInitialData = async () => {
      try {
        setIsLoading(true);
        
        // Load user balance
        const userResponse = await fetchWithAuth('/api/users/me');
        if (userResponse.ok) {
          const userData = await userResponse.json();
          setBalance(userData.balance?.available || 0);
        }

        // Load trade history
        const historyResponse = await fetchWithAuth('/api/trades/history');
        if (historyResponse.ok) {
          const historyData = await historyResponse.json();
          setTradeHistory(historyData);
        }

        // Load current session
        const sessionResponse = await fetchWithAuth('/api/sessions/current');
        if (sessionResponse.ok) {
          const sessionData = await sessionResponse.json();
          setCurrentSession(sessionData);
        }
      } catch (error) {
        console.error('Lỗi khi tải dữ liệu:', error);
        setError('Không thể tải dữ liệu. Vui lòng thử lại sau.');
      } finally {
        setIsLoading(false);
      }
    };

    loadInitialData();
  }, [token, loading, user, router, toast]);

  // Handle placing a new trade
  const handlePlaceOrder = useCallback(async (direction: 'UP' | 'DOWN') => {
    if (!token || !currentSession || !amount) return;
    
    try {
      setIsSubmitting(true);
      
      const response = await fetchWithAuth('/api/trades/place', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          sessionId: currentSession.sessionId,
          direction,
          amount: Number(amount),
          asset: 'XAU/USD'
        })
      });

      if (!response.ok) {
        throw new Error('Không thể đặt lệnh. Vui lòng thử lại.');
      }

      const { trade } = await response.json();
      
      // Add to local state
      const newTrade: TradeHistoryRecord = {
        id: trade._id,
        session: parseInt(trade.sessionId.slice(-4)),
        direction: trade.direction,
        amount: trade.amount,
        status: 'pending',
        result: null,
        profit: 0,
        createdAt: new Date().toISOString()
      };

      setTradeHistory(prev => [newTrade, ...prev]);
      setBalance(prev => prev - trade.amount);
      setAmount('');

      // Start checking for results
      startCheckingResult(trade.sessionId);

      toast({
        title: 'Thành công',
        description: `Đã đặt lệnh ${direction === 'UP' ? 'TĂNG' : 'GIẢM'} thành công`
      });
    } catch (error: any) {
      console.error('Lỗi khi đặt lệnh:', error);
      toast({
        title: 'Lỗi',
        description: error.message || 'Đã xảy ra lỗi khi đặt lệnh',
        variant: 'destructive'
      });
    } finally {
      setIsSubmitting(false);
    }
  }, [token, currentSession, amount, toast]);

  // Check trade results
  const startCheckingResult = useCallback(async (sessionId: string) => {
    const checkResult = async () => {
      try {
        const response = await fetchWithAuth('/api/trades/check-results', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ sessionId })
        });

        const data = await response.json();
        
        if (data.hasResult) {
          // Update trade history with results
          setTradeHistory(prev => 
            prev.map(trade => {
              const updatedTrade = data.trades.find((t: any) => t._id === trade.id);
              if (updatedTrade) {
                return {
                  ...trade,
                  status: updatedTrade.result || 'pending',
                  result: updatedTrade.result,
                  profit: updatedTrade.profit || 0,
                  updatedAt: new Date().toISOString()
                };
              }
              return trade;
            })
          );

          // Update balance if needed
          if (data.result) {
            const userResponse = await fetchWithAuth('/api/users/me');
            if (userResponse.ok) {
              const userData = await userResponse.json();
              setBalance(userData.balance.available);
            }
          }
        } else {
          // Check again after 5 seconds if no result yet
          setTimeout(checkResult, 5000);
        }
      } catch (error) {
        console.error('Lỗi khi kiểm tra kết quả:', error);
        // Retry after 5 seconds on error
        setTimeout(checkResult, 5000);
      }
    };

    // Start checking after 5 seconds
    setTimeout(checkResult, 5000);
  }, []);

  // Loading state
  if (isLoading || loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
        <span className="ml-2">Đang tải dữ liệu...</span>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <AlertCircle className="h-12 w-12 text-red-500 mb-4" />
        <h2 className="text-xl font-semibold mb-2">Đã xảy ra lỗi</h2>
        <p className="text-gray-600 mb-4 text-center">{error}</p>
        <Button onClick={() => window.location.reload()}>
          <RefreshCw className="mr-2 h-4 w-4" /> Tải lại trang
        </Button>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 p-4 md:p-8">
      <div className="max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-12 gap-6">
        {/* Main Content */}
        <div className="lg:col-span-8">
          <Card>
            <CardHeader>
              <CardTitle>Giao dịch</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {/* Trading Chart */}
                <div className="h-96 bg-gray-200 rounded-lg flex items-center justify-center">
                  <p>Biểu đồ giao dịch sẽ được hiển thị ở đây</p>
                </div>

                {/* Trade Actions */}
                <div className="grid grid-cols-2 gap-4">
                  <Button 
                    variant="success" 
                    size="lg"
                    onClick={() => handlePlaceOrder('UP')}
                    disabled={isSubmitting}
                  >
                    TĂNG
                  </Button>
                  <Button 
                    variant="destructive" 
                    size="lg"
                    onClick={() => handlePlaceOrder('DOWN')}
                    disabled={isSubmitting}
                  >
                    GIẢM
                  </Button>
                </div>

                {/* Amount Input */}
                <div className="space-y-2">
                  <label className="block text-sm font-medium">Số tiền (VNĐ)</label>
                  <div className="flex space-x-2">
                    <input
                      type="number"
                      value={amount}
                      onChange={(e) => setAmount(e.target.value)}
                      className="flex-1 p-2 border rounded"
                      placeholder="Nhập số tiền"
                    />
                    <Button 
                      onClick={() => setAmount((balance / 2).toString())}
                      variant="outline"
                    >
                      1/2
                    </Button>
                    <Button 
                      onClick={() => setAmount(balance.toString())}
                      variant="outline"
                    >
                      Tất cả
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Right Column */}
        <div className="lg:col-span-4 space-y-6">
          {/* Balance Card */}
          <Card>
            <CardHeader>
              <CardTitle>Số dư khả dụng</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {balance.toLocaleString()} VNĐ
              </div>
            </CardContent>
          </Card>

          {/* Trade History */}
          <Card>
            <CardHeader>
              <CardTitle>Lịch sử giao dịch</CardTitle>
            </CardHeader>
            <CardContent>
              <TradeHistory trades={tradeHistory} />
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
